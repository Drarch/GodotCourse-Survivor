## 1. Enemy health

extends CharacterBody2D
class_name EnemyBase

@export var health: float = 60.0

########

## 1.4 Hit damage

func hit(inDamage: float) -> void:
	currentHealth -= inDamage
	if currentHealth <= 0.0:
		self.queue_free()
	
	%HealthBar.visible = currentHealth != health
	
	var healthBar: ProgressBar = %Health_ProgressBar as ProgressBar
	healthBar.value = (currentHealth / health) * healthBar.max_value
	
#

extends BulletBase
class_name BulletStraight

enemy.hit(10.0)

#######

## 2.1 Create DamageIndicator

extends Control
class_name DamageIndicator

var duration:float = 0.7
@export var damageValue: float = 123.0

var offsetDistance: float = 30.0

func _ready():
	%Number_Label.text = str(round(damageValue))
	
	var tween = get_tree().create_tween().bind_node(self)
	tween.tween_interval(duration)
	tween.tween_callback(self.queue_free)
	
#######

## 2.3 Validation and instantiation od DamageIndicator

extends CharacterBody2D
class_name EnemyBase

@export var damageIndicatorScene: PackedScene = preload("res://Nodes/UI/DamageIndicator/damage_indicator.tscn")

func _ready():
	_checkDamageIndicator()


func _checkDamageIndicator() -> bool:
	var instance: DamageIndicator = _instntiateDamagaIndicator()
	
	if is_instance_valid(instance):
		instance.queue_free()
		return true
	
	return false


# Hit

func _instntiateDamagaIndicator() -> DamageIndicator:
	if !is_instance_valid(damageIndicatorScene):
		push_error("DamageIndicatorScene not set")
		return null
		
	var instance: DamageIndicator = damageIndicatorScene.instantiate() as DamageIndicator

	if !is_instance_valid(instance):
		push_error("DamageIndicatorScene is not valid type: DamageIndicator")
		return null
	
	return instance

func _spawnDamagaIndicator(inDamage: float) -> void:
	var damageIndicator: DamageIndicator = _instntiateDamagaIndicator()
	
	if !is_instance_valid(damageIndicator):
		return
		
	damageIndicator.damageValue = inDamage
	%DamageIndicatorContainer.add_child(damageIndicator)


func hit(inDamage: float) -> void:
	currentHealth -= inDamage
	if currentHealth <= 0.0:
		self.queue_free()
	
	%HealthBar.visible = currentHealth != health
	
	var healthBar: ProgressBar = %Health_ProgressBar as ProgressBar
	healthBar.value = (currentHealth / health) * healthBar.max_value
	
	_spawnDamagaIndicator(inDamage)
	
#######

##2.4 proper DamageIndicator Tween

extends Control
class_name DamageIndicator


var duration:float = 0.7
@export var damageValue: float = 123.0

var offsetDistance: float = 30.0


func _ready():
	%Number_Label.text = str(round(damageValue))

	var tween = get_tree().create_tween().bind_node(self).set_parallel(true)
	tween.tween_property(self, "scale", Vector2.ONE * 1.5, duration * 0.5)
	tween.tween_property(self, "modulate", Color.RED, duration * 0.5).set_ease(Tween.EASE_IN)
	tween.chain().tween_property(self, "scale", Vector2.ZERO, duration * 0.5)
	tween.chain().tween_callback(self.queue_free)
	
	var tweenPosition = get_tree().create_tween().bind_node(self)
	tweenPosition.tween_property(self, "position", Vector2.UP* offsetDistance, duration)
	
#######

##3.1 Copy bar from EnemyBase

extends CharacterBody2D
class_name Player

@export var maxHealth: float = 100.0
@onready var currentHealth: float = maxHealth

func _ready() -> void:
	updateHealthBar()

#region Health

func hit(inDamage: float) -> void:
	currentHealth -= inDamage
	if currentHealth <= 0.0:
		#Player dead
		pass
	
	updateHealthBar()

func updateHealthBar() -> void:
	var healthBar: ProgressBar = %Health_ProgressBar as ProgressBar
	healthBar.value = (currentHealth / maxHealth) * healthBar.max_value

#endregion

#######

##3.2 Add Attack_Area to EnemyBase

extends CharacterBody2D
class_name EnemyBase

@export_group("Health")
@export var health: float = 60.0
@onready var currentHealth: float = health

@export_group("Attack")
@export var attackDamage: float = 1.0
@export var attackCooldown: float = 1.0
var attackTarget: Node2D

@export_group("Move")
@export var moveSpeed: float = 100.0
@onready var moveSpeedCurrent: float = moveSpeed
var moveDirection: Vector2 = Vector2.ZERO

@export var moveTargetNode: Node2D

#region Attack

func attack(inTarget: Node2D) -> void:
	if !is_instance_valid(inTarget) && "hit" in inTarget:
		return
		
	inTarget.hit(attackDamage)

func _on_attack_area_2d_body_entered(inBody: Node2D) -> void:
	if is_instance_valid(attackTarget):
		return
		
	attackTarget = inBody
	%Attack_Timer.start()

func _on_attack_area_2d_body_exited(inBody: Node2D) -> void:
	if attackTarget == inBody:
		attackTarget = null
		%Attack_Timer.stop()
		

func _onAttackTimer_Timeout() -> void:
	attack(attackTarget)

#endregion

