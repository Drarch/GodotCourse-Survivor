#---------- class_name

extends Node2D
class_name EnemyBase


#---------- Player move copy

@export var moveSpeed: float = 100.0
var moveDirection: Vector2 = Vector2.ZERO

@onready var moveSpeedCurrent: float = moveSpeed

func _process(delta: float) -> void:
	_move(moveDirection, delta)


# Movement

func _move(inDirection: Vector2, inDelta: float) -> void:
	position += inDirection.normalized() * moveSpeedCurrent * inDelta
	
#---------- Target Node2D

@export var targetNode: Node2D


func _process(delta: float) -> void:
	moveDirection = _getTargetVector(targetNode)
	_move(moveDirection, delta)


# Getters
	
func _getTargetVector(inTarget: Node2D) -> Vector2:
	if not is_instance_valid(inTarget):
		return Vector2.ZERO
		
	return Vector2.ONE
	

#---------- Target direction math

func _getTargetVector(inTarget: Node2D) -> Vector2:
	if not is_instance_valid(inTarget):
		return Vector2.ZERO
	
	var result: Vector2 = Vector2.ZERO
	
	result = inTarget.global_position - self.global_position
	
	return result
	

#---------- CharacterBody2D
	
extends CharacterBody2D
class_name EnemyBase


func _move(inDirection: Vector2, inDelta: float) -> void:
	velocity = inDirection.normalized() * moveSpeedCurrent
	move_and_slide()


#---------- _move(inTarget: Node2D)
	
func _process(delta: float) -> void:
	_move(targetNode, delta)
	_lookAtTarget(targetNode)

# Movement

func _move(inTarget: Node2D, _inDelta: float) -> void:
	if not is_instance_valid(inTarget):
		return
	
	moveDirection = _getTargetVector(targetNode)
	
	velocity = moveDirection.normalized() * moveSpeedCurrent
	move_and_slide()