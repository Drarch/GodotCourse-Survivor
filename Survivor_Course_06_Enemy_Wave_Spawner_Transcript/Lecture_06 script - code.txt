## 1.2. GameTimer script

extends Node
class_name GameTimer

@export var gameLength: float = 30 * 60

## 2.1 Process timer

var currentTime = 0.0

func _process(delta: float) -> void:
	currentTime += delta
	
## 2.2 Time events array
	
## [Timestamp, [Callable]]
var timeEvents: Dictionary = {}

func registerTimeEvent(inTime: float, inMethod: Callable) -> void:
	if timeEvents.has(inTime):
		timeEvents[inTime].append(inMethod)
	else:
		timeEvents[inTime] = [inMethod]
		

## 2.3 Next event time

const timeMax: float = 1.79769e308

var nextTimeEvent: float = timeMax

func registerTimeEvent(inTime: float, inMethod: Callable) -> void:
	(...)
		
	if nextTimeEvent > inTime:
		nextTimeEvent = inTime
		

## 2.4 Process next event

func _process(delta: float) -> void:
	currentTime += delta
	
	if nextTimeEvent <= currentTime:
		_callEvent(nextTimeEvent)


func _callEvent(inTime: float) -> void:
	for event in timeEvents[inTime]:
		var eventCallable: Callable = event as Callable
		if eventCallable != null && eventCallable.is_valid():
			eventCallable.call(inTime)
	
	timeEvents.erase(inTime)
	if timeEvents.size() > 0:
		nextTimeEvent = timeEvents.keys().min()
	else:
		nextTimeEvent = timeMax


## 2.5 GameEnded signal

signal gameEnded(inTimeStamp: float)

func _ready() -> void:
	registerTimeEvent(gameLength, _gameEnd)

func _gameEnd(inTime: float):
	set_process(false)
	gameEnded.emit(inTime)