## 1.2.1 New script

extends Node
class_name WaveSpawnerBase

@export var enemyScene: PackedScene
@export var frequency: float = 0.5
@export var maximumSpawns: int = 10

@export var spawnRelativeNode: Node2D
@export var targetNode: Node2D

@export var enemiesContainer: Node


## 1.2.2 func spawnEnemy() -> void:

func spawnEnemy() -> void:
	if not is_instance_valid(enemyScene):
		return
		
	var enemy: EnemyBase = enemyScene.instantiate() as EnemyBase
	
	if !is_instance_valid(enemy):
		push_error("EnemyScene is not valid type: [EnemyBase]")
		return
	
	enemy.moveTargetNode = targetNode
	enemy.global_position = _calculateSpawnPosition()
	
	enemiesContainer.add_child(enemy)

	
## 1.2.3 func _calculateSpawnPosition() -> Vector2:

func _calculateSpawnPosition() -> Vector2:
	var spawnOffsetVector = Vector2.LEFT * 500.0
	
	var result = spawnRelativeNode.global_position + spawnOffsetVector
	return result
	

## 1.2.4 maximumSpawns

func _onEnemyDeath(_inEnemyBase: EnemyBase) -> void:
	currentSpawns -= 1


func spawnEnemy() -> void:
	if currentSpawns >= maximumSpawns:
		return
	(...)
	enemy.enemy_death.connect(_onEnemyDeath, CONNECT_ONE_SHOT)
	currentSpawns += 1
	

## 1.2.5 Spawn off screen

func _calculateSpawnPosition() -> Vector2:
	var spawnDistance: float = (get_viewport().size / 2.0).length()
	spawnDistance += 100.0
	
	var direction: Vector2 = Vector2.from_angle(randf() * TAU)
	
	var spawnOffsetVector = direction * spawnDistance
	
	var result = spawnRelativeNode.global_position + spawnOffsetVector
	return result